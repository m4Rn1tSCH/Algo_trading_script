"""
This module connects to the alpaca API and automatically to the Alpha Vantage API
The functions gather data around the account primarily profit n loss; buying power
The keys are stored in  alpaca_acc_config.py
"""
# access files
import alpaca_trade_api as tradeapi
from decouple import config

# initialize the API connection
api = tradeapi.REST(config('ALPACA_API_KEY'),
					config('ALPACA_SECRET_KEY'),
					config('BASE_URL'),
					api_version='v2')

# simple test order
# api.submit_order(symbol='NVDA',
#                  qty=1,
#                  side="buy",
#                  type="market")

# Get our account information.
def bal_report():

	msg = 'Accounts buying power: ${}.'.format(api.get_account().buying_power)
	return msg

# Lists currently open trades
def list_positions():

	"""
	Print the dictionary generated by the website to list positions
	:return: Position object; convert to dict with ._raw
	"""

	try:
		positions = api.list_positions()
		if len(positions) == 0:
			print("no positions found")
		else:
			pass
	except BaseException as e:
		print(e)


def portfolio_overview():

	"""
	Shows a list of tuples of stock positions owned and corresponding volume in pcs
	:return: list of tuples
	"""

	pos = api.list_positions()
	portfolio_list = []
	print("Current portfolio positions:\n SYMBOL | NO. STOCKS")
	for i in range(0, len(pos), 1):
		# print as tuple
		print((pos[i].symbol, pos[i].qty))
		# append a tuple with the stock and quantity held
		portfolio_list.append((pos[i].symbol, pos[i].qty))
	return portfolio_list


def list_orders():

	try:
		print("orders are being retrieved...")
		orders = api.list_orders()
		if len(orders) == 0:
			print("no orders found")
	except BaseException as e:
		print("ERROR: ", e)
	return


def get_acc_profit():

	"""
	Check daily equity difference of the account
	:return: str
	"""
	# Get account info
	account = api.get_account()

	# Check our current balance vs. our balance at the last market close
	balance_change = float(account.equity) - float(account.last_equity)
	print('Today\'s portfolio balance change: $ {}'.format(balance_change))
	return


def list_equities():
	"""
	available exchanges: {'NASDAQ', 'OTC', 'AMEX', 'NYSE', 'ARCA', 'BATS'}
	:return: list
	"""
	# Get a list of all active assets.
	active_assets = api.list_assets(status='active')

	# Filter the assets down to just those on NASDAQ.
	nasdaq_assets = [a for a in active_assets if a.exchange == 'NASDAQ']
	return nasdaq_assets

if __name__ == '__main__':
	"""
	With the Alpaca API, you can check on your daily profit or loss by
	comparing your current balance to yesterday's balance.
	"""
	# run two functions when invoked directly
	bal_report()
	get_acc_profit()
	list_equities()
